% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gc_event_import.R
\name{gc_event_import}
\alias{gc_event_import}
\title{Import a table of calendar events}
\usage{
gc_event_import(x, events, sendNotifications = FALSE, verbose = TRUE)
}
\arguments{
\item{x}{\code{googlecalendar} object representing the calendar in
which to create the event.}

\item{events}{\code{data.frame}-like object or file path to the table
to be imported.}

\item{sendNotifications}{Logical indicating whether to send
notifications about the event.}

\item{verbose}{Logical indicating whether to print informative
messages.}
}
\value{
Character vector of the newly created event IDs.
}
\description{
Imports a delimited file into Google Calendar, creating one event for
every row in a table. This method operates on the Google Calendar API
Events resource.
}
\details{
In order for \code{gc_event_import} to operate, it must be supplied
with a source that complies with the following naming convention for
column headers:

\itemize{
  \item{Each column should represent a single property, with headers
    sharing the same name as their \code{event} object counterpart.
    For example, the title header would be \code{summary} and the
    location header would be \code{location}.}
  \item{The path of a nested property is delimited with a \code{.}
  (period). For example, the start time header would be
  \code{start.dateTime} and the end time zone header would be
  \code{end.timeZone}.}
}

When reading event import tables R, be careful that your input method
preserves the header names and does not improperly coerce column
types. For example, with \code{read.csv}, you may need to set
\code{check.names = FALSE} and with \code{readr}'s \code{read_csv},
you may need to set \code{col_types =} \code{cols(.default = "c")}.

Note that it may not be possible to represent all properties of an
event within the scalar confines of a single CSV-type row (the
\code{attendees} sub-structure is an example of one such group of
arbitrary-length properties). However, careful preprocessing of an
input table may enable you to overcome this restriction. See the
project
\href{https://github.com/benjcunningham/googlecalendar}{README} on
GitHub for some examples of this.
}
\examples{
\dontrun{
tbl <- read.csv("sunsets.csv", stringsAsFactors = FALSE)

gc_summary("Sunsets") \%>\%
  gc_event_import(tbl)
}

}
